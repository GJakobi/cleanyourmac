# A production-ready GitHub Actions workflow for building and releasing a macOS Swift application.
name: Build and Release macOS App

on:
  push:
    # This workflow runs only when a new version tag (e.g., v1.2.3) is pushed.
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

# =================================================================
# ==               BUILD JOB: Create macOS App DMG               ==
# =================================================================
jobs:
  build:
    name: Build and Package macOS App
    # Use the latest available macOS runner from GitHub
    runs-on: macos-latest
    permissions:
      contents: read # Read permission is needed to check out the code

    steps:
      # --- 1. Checkout Code ---
      - name: Checkout repository
        uses: actions/checkout@v4
        # Fetch all history so the build script can determine the version from git tags
        with:
          fetch-depth: 0

      # --- 2. Setup Swift Environment ---
      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: "6.0" # Ensures the correct Swift version for your project

      # --- 3. Cache Dependencies ---
      # Cache Swift Package Manager dependencies to speed up future builds.
      - name: Cache Swift PM dependencies
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      # --- 4. Run the Build Script ---
      # The build script handles building the app and creating the .app bundle.
      - name: Run build script
        run: |
          chmod +x build_app.sh
          ./build_app.sh

      # --- 5. Package the App into a DMG ---
      - name: Install create-dmg tool
        run: brew install create-dmg

      - name: Create DMG
        run: |
          create-dmg \
            --volname "${{ vars.APP_NAME || 'CleanYourMac' }} Installer" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --app-drop-link 600 185 \
            "dist/CleanYourMac.dmg" \
            "dist/CleanYourMac.app"

      # --- 6. Upload Artifact ---
      # Upload the final DMG so it can be used by the release job.
      - name: Upload DMG as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: CleanYourMac-macOS-DMG
          path: dist/CleanYourMac.dmg

  # =================================================================
  # ==               RELEASE JOB: Publish to GitHub              ==
  # =================================================================
  release:
    name: Publish GitHub Release
    # This job depends on the 'build' job finishing successfully.
    needs: build
    runs-on: ubuntu-latest # A cheaper/faster runner is fine for publishing.
    permissions:
      contents: write # Write permission is needed to create a GitHub Release.

    steps:
      # --- 1. Download Artifact ---
      # Download the DMG that was built in the previous job.
      - name: Download DMG from build job
        uses: actions/download-artifact@v4
        with:
          name: CleanYourMac-macOS-DMG

      # --- 2. Create GitHub Release ---
      # This uses the popular softprops/action-gh-release action.
      - name: Create GitHub Release and Upload DMG
        uses: softprops/action-gh-release@v2
        with:
          # The name of the release will be the tag name (e.g., "v1.0.0").
          # The body of the release will be automatically populated with your commit messages.
          files: CleanYourMac.dmg